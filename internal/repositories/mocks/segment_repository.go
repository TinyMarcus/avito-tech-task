// Code generated by MockGen. DO NOT EDIT.
// Source: segment_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "github.com/TinyMarcus/avito-tech-task/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSegmentRepository is a mock of SegmentRepository interface.
type MockSegmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentRepositoryMockRecorder
}

// MockSegmentRepositoryMockRecorder is the mock recorder for MockSegmentRepository.
type MockSegmentRepositoryMockRecorder struct {
	mock *MockSegmentRepository
}

// NewMockSegmentRepository creates a new mock instance.
func NewMockSegmentRepository(ctrl *gomock.Controller) *MockSegmentRepository {
	mock := &MockSegmentRepository{ctrl: ctrl}
	mock.recorder = &MockSegmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentRepository) EXPECT() *MockSegmentRepositoryMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegmentRepository) CreateSegment(slug, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", slug, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentRepositoryMockRecorder) CreateSegment(slug, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentRepository)(nil).CreateSegment), slug, description)
}

// DeleteSegment mocks base method.
func (m *MockSegmentRepository) DeleteSegment(slug string) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", slug)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentRepositoryMockRecorder) DeleteSegment(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentRepository)(nil).DeleteSegment), slug)
}

// GetAllSegments mocks base method.
func (m *MockSegmentRepository) GetAllSegments() ([]*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSegments")
	ret0, _ := ret[0].([]*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSegments indicates an expected call of GetAllSegments.
func (mr *MockSegmentRepositoryMockRecorder) GetAllSegments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSegments", reflect.TypeOf((*MockSegmentRepository)(nil).GetAllSegments))
}

// GetSegmentBySlug mocks base method.
func (m *MockSegmentRepository) GetSegmentBySlug(slug string) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentBySlug", slug)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentBySlug indicates an expected call of GetSegmentBySlug.
func (mr *MockSegmentRepositoryMockRecorder) GetSegmentBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentBySlug", reflect.TypeOf((*MockSegmentRepository)(nil).GetSegmentBySlug), slug)
}

// UpdateSegment mocks base method.
func (m *MockSegmentRepository) UpdateSegment(slug, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", slug, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentRepositoryMockRecorder) UpdateSegment(slug, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegmentRepository)(nil).UpdateSegment), slug, description)
}
